// app/api/admin/stats/route.ts

// export async function GET(request: NextRequest) {
// Â  try {
// Â  Â  // Ensure the user is an Admin
// Â  Â  const userRole = request.headers.get("x-user-role") as UserRole
// Â  Â  if (userRole !== UserRole.ADMIN) {
// Â  Â  Â  return NextResponse.json({ error: { code: "FORBIDDEN", message: "Admin access required" } }, { status: 403 })
// Â  Â  }

// Â  Â  // Use a transaction for efficiency to get all counts in one DB roundtrip
// Â  Â  const [totalQueries, pendingQueries, totalComplaints, activeUsers, totalPANCHAYATs] = await prisma.$transaction([
// Â  Â  Â  prisma.query.count(),
// Â  Â  Â  prisma.query.count({ where: { status: "PENDING_REVIEW" } }),
// Â  Â  Â  prisma.complaint.count(),
// Â  Â  Â  prisma.user.count(),
// Â  Â  Â  prisma.panchayat.count(),
// Â  Â  ])

// Â  Â  // --- ðŸš€ NEW: Dynamically fetch recent activities ---

// Â  Â  // 1. Fetch recent records from different tables
// Â  Â  const recentQueries = await prisma.query.findMany({
// Â  Â  Â  take: 7,
// Â  Â  Â  orderBy: { createdAt: "desc" },
// Â  Â  Â  include: { user: { select: { name: true } } },
// Â  Â  })

// Â  Â  const recentComplaints = await prisma.complaint.findMany({
// Â  Â  Â  take: 7,
// Â  Â  Â  orderBy: { createdAt: "desc" },
// Â  Â  Â  include: { user: { select: { name: true } } },
// Â  Â  })

// Â  Â  const recentUsers = await prisma.user.findMany({
// Â  Â  Â  take: 7,
// Â  Â  Â  where: { role: "VOTER" },
// Â  Â  Â  orderBy: { createdAt: "desc" },
// Â  Â  })

// Â  Â  // 2. Map them to a common notification format
// Â  Â  const queryNotifications = recentQueries.map(q => ({
// Â  Â  Â  id: q.id,
// Â  Â  Â  title: `New Query: ${q.title}`,
// Â  Â  Â  message: `Submitted by ${q.user.name}.`,
// Â  Â  Â  type: "NEW_QUERY",
// Â  Â  Â  createdAt: q.createdAt,
// Â  Â  }))

// Â  Â  const complaintNotifications = recentComplaints.map(c => ({
// Â  Â  Â  id: c.id,
// Â  Â  Â  title: `New Complaint: ${c.subject}`,
// Â  Â  Â  message: `Filed by ${c.user.name}.`,
// Â  Â  Â  type: "NEW_COMPLAINT",
// Â  Â  Â  createdAt: c.createdAt,
// Â  Â  }))

// Â  Â  const userNotifications = recentUsers.map(u => ({
// Â  Â  Â  id: u.id,
// Â  Â  Â  title: "New User Registered",
// Â  Â  Â  message: `${u.name} has joined as a Voter.`,
// Â  Â  Â  type: "NEW_USER",
// Â  Â  Â  createdAt: u.createdAt,
// Â  Â  }))

// Â  Â  // 3. Combine, sort, and slice to get the 7 most recent activities
// Â  Â  const allActivities = [...queryNotifications, ...complaintNotifications, ...userNotifications]
// Â  Â  Â  .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
// Â  Â  Â  .slice(0, 7)

// Â  Â  // Combine all stats into a single response object
// Â  Â  const stats = {
// Â  Â  Â  totalQueries,
// Â  Â  Â  pendingQueries,
// Â  Â  Â  totalComplaints,
// Â  Â  Â  activeUsers,
// Â  Â  Â  totalPANCHAYATs,
// Â  Â  Â  recentNotifications: allActivities.map((n) => ({
// Â  Â  Â  Â  id: n.id,
// Â  Â  Â  Â  title: n.title,
// Â  Â  Â  Â  message: n.message,
// Â  Â  Â  Â  time: new Intl.DateTimeFormat("en-US", {
// Â  Â  Â  Â  Â  month: "short",
// Â  Â  Â  Â  Â  day: "numeric",
// Â  Â  Â  Â  Â  year: "numeric",
// Â  Â  Â  Â  Â  hour: "numeric",
// Â  Â  Â  Â  Â  minute: "numeric",
// Â  Â  Â  Â  Â  hour12: true,
// Â  Â  Â  Â  }).format(n.createdAt),
// Â  Â  Â  Â  type: n.type,
// Â  Â  Â  })),
// Â  Â  }

import { type NextRequest, NextResponse } from "next/server"
import { prisma } from "@/lib/prisma"
import { UserRole } from "@prisma/client"

export async function GET(request: NextRequest) {
  try {
    // Ensure the user is an Admin
    const userRole = request.headers.get("x-user-role") as UserRole
    if (userRole !== UserRole.ADMIN) {
      return NextResponse.json(
        { error: { code: "FORBIDDEN", message: "Admin access required" } }, 
        { status: 403 }
      )
    }

    // Get all counts in a single transaction for consistency
    const [
      totalQueries, 
      pendingQueries, 
      totalComplaints, 
      activeUsers, 
      totalPanchayats
    ] = await prisma.$transaction([
      prisma.query.count(),
      prisma.query.count({ where: { status: "PENDING_REVIEW" } }),
      prisma.complaint.count(),
      prisma.user.count({ where: { role: { not: UserRole.ADMIN } } }),
      prisma.panchayat.count()
    ])

    // Get recent notifications
    const recentNotifications = await prisma.notification.findMany({
      orderBy: { createdAt: "desc" },
      take: 5,
      select: {
        id: true,
        title: true,
        message: true,
        type: true,
        createdAt: true
      }
    })

    // Format the response
    const stats = {
      totalQueries,
      pendingQueries,
      totalComplaints,
      activeUsers,
      totalPanchayats, // This will be used in the admin dashboard
      recentNotifications: recentNotifications.map((n) => ({
        id: n.id,
        title: n.title || "Notification",
        message: n.message || "",
        time: new Intl.DateTimeFormat("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          hour12: true,
        }).format(n.createdAt),
        type: n.type || "INFO",
      })),
    }
Â  Â  Â  } else {
Â  Â  Â  Â  message += "."
Â  Â  Â  }

Â  Â  Â  return {
Â  Â  Â  Â  id: q.id,
Â  Â  Â  Â  title: `New Query: ${q.title}`,
Â  Â  Â  Â  message: message,
Â  Â  Â  Â  type: "NEW_QUERY",
Â  Â  Â  Â  createdAt: q.createdAt,
Â  Â  Â  }
Â  Â  })

Â  Â  const complaintNotifications = recentComplaints.map(c => ({
Â  Â  Â  id: c.id,
Â  Â  Â  title: `New Complaint: ${c.subject}`,
Â  Â  Â  message: "A new complaint has been filed.",
Â  Â  Â  type: "NEW_COMPLAINT",
Â  Â  Â  createdAt: c.createdAt,
Â  Â  }))

Â  Â  const userNotifications = recentUsers.map(u => ({
Â  Â  Â  id: u.id,
Â  Â  Â  title: "New User Registered",
Â  Â  Â  message: "A new user has registered as a Voter.",
Â  Â  Â  type: "NEW_USER",
Â  Â  Â  createdAt: u.createdAt,
Â  Â  }))

Â  Â  // 3. Combine, sort, and slice to get the 7 most recent activities
Â  Â  const allActivities = [...queryNotifications, ...complaintNotifications, ...userNotifications]
Â  Â  Â  .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
Â  Â  Â  .slice(0, 7)

Â  Â  // Combine all stats into a single response object
Â  Â  const stats = {
Â  Â  Â  totalQueries,
Â  Â  Â  pendingQueries,
Â  Â  Â  totalComplaints,
Â  Â  Â  activeUsers,
Â  Â  Â  totalPANCHAYATs,
Â  Â  Â  recentNotifications: allActivities.map((n) => ({
Â  Â  Â  Â  id: n.id,
Â  Â  Â  Â  title: n.title,
Â  Â  Â  Â  message: n.message,
Â  Â  Â  Â  time: new Intl.DateTimeFormat("en-US", {
Â  Â  Â  Â  Â  month: "short",
Â  Â  Â  Â  Â  day: "numeric",
Â  Â  Â  Â  Â  year: "numeric",
Â  Â  Â  Â  Â  hour: "numeric",
Â  Â  Â  Â  Â  minute: "numeric",
Â  Â  Â  Â  Â  hour12: true,
Â  Â  Â  Â  }).format(n.createdAt),
Â  Â  Â  Â  type: n.type,
Â  Â  Â  })),
Â  Â  }

Â  Â  return NextResponse.json(stats)
Â  } catch (error) {
Â  Â  console.error("Admin stats fetch error:", error)
Â  Â  return NextResponse.json(
Â  Â  Â  { error: { code: "INTERNAL_ERROR", message: "Failed to fetch admin statistics" } },
Â  Â  Â  { status: 500 }
Â  Â  )
Â  }
}